Angular Notes:

Bootstrap install:
via CDN
copy <link> in head
copy script in body

via npm:
npm install bootstrap
in angular.json add:
in styles array: "./node_modules/bootstrap/dist/css/bootstrap.min.css"
in scripts: "./node_modules/bootstrap/dist/js/bootstrap.js" 

2]angular-routing.module.ts
-This file is used to define and configure routes in the application by defining path to component mapping
several other responsibilities include: 
-Lazy loading,  which means loading modules and components on-demand instead of upfront. 
-Route Guards: Route guards are used to control access to routes based on certain conditions. The routing module allows you to define and attach route guards to routes. Guards can be used to implement authentication checks, authorization checks, and other custom logic to determine if a user is allowed to access a particular route.
-Router Outlet: The routing module also defines the RouterOutlet directive, which is a placeholder where the router renders the corresponding component based on the current route. You typically place the RouterOutlet directive in your application's main template file, such as app.component.html.

3]Angular Terminologies:
In the context of Angular, there are several key terminologies to understand. Let's go through some of them:

Module: In Angular, a module is a container that organizes related components, directives, services, and other application elements. It is defined using the @NgModule decorator. A module encapsulates a specific feature or functionality of an application. It helps to keep the codebase modular and allows for better organization, reusability, and maintainability.

Component: A component in Angular is a building block of the user interface. It represents a part of the application's UI and encapsulates its own logic, templates, and styles. Components are defined using the @Component decorator. They receive input data through properties and emit output events to communicate with other components.

Template: The template in Angular represents the HTML view of a component. It defines how the component's UI should be rendered and displayed to the user. The template can contain HTML markup, Angular directives, binding expressions, and other Angular-specific syntax. It is associated with a component and controls the rendering of the component's data and structure.

Directive: Directives are instructions that Angular applies to elements in the DOM (Document Object Model). They can modify the behavior or appearance of elements. Angular has two types of directives: structural and attribute directives. Structural directives, such as ngIf and ngFor, manipulate the DOM by adding or removing elements. Attribute directives, such as ngStyle and ngClass, modify the behavior or appearance of existing elements.

Service: Services in Angular are singleton objects that provide specific functionality to components throughout an application. They are used for implementing business logic, data retrieval, communication with servers, and more. Services are typically injectable and can be injected into components, directives, or other services using dependency injection.

Dependency Injection (DI): Dependency Injection is a design pattern used in Angular to manage the dependencies of components, services, and other objects. It allows for loose coupling and facilitates modular development. DI is performed by Angular's built-in injector, which creates and resolves dependencies automatically based on the configuration defined in providers.

Routing: Routing in Angular enables navigation between different views or components based on the user's interaction or application state. The Angular Router is responsible for mapping URLs to specific components and updating the view accordingly. Routing allows for building single-page applications (SPAs) where different components are loaded dynamically without full page reloads.

